/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test
    void testAddVertex() {
        Graph<String> graph = new Graph<>(4);
        Vertex<String> vertexA = graph.addVertex("A");
        assertTrue(graph.getVertices().contains(vertexA));
    }

    @Test
    void testAddEdge() {
        Graph<String> graph = new Graph<>(4);
        Vertex<String> vertexA = graph.addVertex("A");
        Vertex<String> vertexB = graph.addVertex("B");
        graph.addEdge(vertexA, vertexB, 3);
        assertEquals(1, graph.getNeighbors(vertexA).size());
    }

    @Test
    void testGetAllVertices() {
        Graph<String> graph = new Graph<>(4);
        Vertex<String> vertexA = graph.addVertex("A");
        Vertex<String> vertexB = graph.addVertex("B");
        assertEquals(2, graph.getVertices().size());
    }

    @Test
    void testGetAllNeighbors() {
        Graph<String> graph = new Graph<>(4);
        Vertex<String> vertexA = graph.addVertex("A");
        Vertex<String> vertexB = graph.addVertex("B");
        graph.addEdge(vertexA, vertexB, 3);
        assertEquals(1, graph.getNeighbors(vertexA).size());
    }

    @Test
    void testGetNeighborsWithWeight() {
        Graph<String> graph = new Graph<>(4);
        Vertex<String> vertexA = graph.addVertex("A");
        Vertex<String> vertexB = graph.addVertex("B");
        graph.addEdge(vertexA, vertexB, 3);
        Edge<String> edgeAB = graph.getNeighbors(vertexA).get(0);
        assertEquals(3, edgeAB.weight);
    }

    @Test
    void testGetSize() {
        Graph<String> graph = new Graph<>(4);
        Vertex<String> vertexA = graph.addVertex("A");
        Vertex<String> vertexB = graph.addVertex("B");
        assertEquals(2, graph.size());
    }

    @Test
    void testSingleVertexAndEdgeGraph() {
        Graph<String> singleVertexGraph = new Graph<>(1);
        Vertex<String> singleVertex = singleVertexGraph.addVertex("SingleVertex");
        assertEquals(1, singleVertexGraph.getVertices().size());
        assertEquals(1, singleVertexGraph.size());
        assertTrue(singleVertexGraph.getNeighbors(singleVertex).isEmpty());
    }
}